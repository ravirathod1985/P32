{
  "description": "This JDBC rule can process account creation requests, deletion requests, and modification requests that pertain to the role attribute. It logs debug messages if other account request types are submitted.",
  "type": "JDBCProvision",
  "signature": {
    "input": [
      {
        "name": "log",
        "description": "The log object associated with the SailPointContext.",
        "type": "Logger"
      },
      {
        "name": "context",
        "description": "A sailpoint.api.SailPointContext object that can be used to query the database if necessary.\n  ",
        "type": null
      },
      {
        "name": "application",
        "description": "The application whose data file is being processed.",
        "type": "Application"
      },
      {
        "name": "schema",
        "description": "The Schema currently in use.",
        "type": "Schema"
      },
      {
        "name": "connection",
        "description": "A connection object to connect to database.",
        "type": "Connection"
      },
      {
        "name": "plan",
        "description": "The ProvisioningPlan created against the JDBC application.",
        "type": "ProvisioningPlan"
      }
    ],
    "output": {
      "name": "result",
      "description": "A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan",
      "type": "ProvisioningResult"
    }
  },
  "sourceCode": {
    "version": "1.0",
    "script": "import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.sql.Types;\r\nimport java.util.List;\r\nimport java.sql.ResultSet;\r\nimport sailpoint.api.SailPointContext;\r\nimport sailpoint.connector.JDBCConnector;\r\nimport sailpoint.object.Application;\r\nimport sailpoint.object.ProvisioningPlan;\r\nimport sailpoint.object.ProvisioningPlan.AccountRequest;\r\nimport sailpoint.object.ProvisioningPlan.AttributeRequest;\r\nimport sailpoint.object.ProvisioningPlan.PermissionRequest;\r\nimport sailpoint.object.ProvisioningResult;\r\nimport sailpoint.object.Schema;\r\n  \r\n public String getAttributeRequestValue(AccountRequest acctReq, String attribute) {\r\n    if (acctReq != null) {\r\n        AttributeRequest attrReq = acctReq.getAttributeRequest(attribute);\r\n        if (attrReq != null) {\r\n            return attrReq.getValue();\r\n        }\r\n    }\r\n    return null;\r\n}\r\nProvisioningResult result = new ProvisioningResult();\r\nPreparedStatement statement;\r\nif (plan != null) {\r\n\r\n\r\n    List accounts = plan.getAccountRequests();\r\n    if ((accounts != null) && (accounts.size() > 0)) {\r\n        for (AccountRequest account : accounts ) {\r\n            try {\r\n                AttributeRequest attrReq = account.getAttributeRequest(\"GROUPID\");\r\n\r\n                if (AccountRequest.Operation.Create.equals(account.getOperation())) {\r\n                    AttributeRequest attrReq = account.getAttributeRequest(\"GROUPID\");\r\n                    ArrayList gid = new ArrayList();\r\n\t\t\t\t\tlog.error(\"====C1 Entering the disable logic - JDBC con rule \");\r\n                    String nativeidnt = account.getNativeIdentity();\r\n                    String empLID, groupID;\r\n                    ResultSet rs;\r\n\t\t\t\t\tif(nativeidnt != null){\r\n                    statement = connection.prepareStatement(\"SELECT LANID,ag.groupid as GROUPID  FROM HPHCONNECTNG.usergroups ug inner join HPHCONNECTNG.accessgroup ag  on ug.groupid=ag.groupid  where  ug.lanid = ?\");\r\n\t\t\t\t\tlog.error(\"====C2 statment query has started to run \");\r\n                    statement.setString(1, (String) account.getNativeIdentity());      // Assign value to input parameter      2 \r\n\r\n                    rs = statement.executeQuery();        // Get the result table from the query  3 \r\n                    log.error(\"====C3 statment query has executed =\"+ rs);\t\t\r\n                    rs.close();                       // Close the ResultSet                  5 \r\n                    statement.close();}\r\n\t\t\t\t\tif (attrReq.getValue() instanceof String) {\r\n                            gid.add(attrReq.getValue());\r\n\t\t\t\t\t\t\tstatement = connection.prepareStatement(\"insert into HPHCONNECTNG.USERGROUPS (LANID,GROUPID) values (?,?)\");\r\n                        statement.setString(1, (String) account.getNativeIdentity());\r\n                        statement.setString(2, attrReq.getValue());\r\n                        statement.executeUpdate();\r\n\t\t\t\t\t\t}                    \r\n                    else if (attrReq.getValue() instanceof List) {\r\n                        gid.addAll(attrReq.getValue());\r\n\t\t\t\t\t\tfor (String gidvalue : gid) {\r\n                        statement = connection.prepareStatement(\"insert into HPHCONNECTNG.USERGROUPS (LANID,GROUPID) values (?,?)\");\r\n                        statement.setString(1, (String) account.getNativeIdentity());\r\n                        statement.setString(2, gidvalue);\r\n                        statement.executeUpdate();\r\n                        log.error(\"1.create- Plan attributes are = \" + account.getNativeIdentity());\r\n                        log.error(\"1.1 create- Group value to add = \" + attrReq.getValue());\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n                    }\r\n\t\t\t\t\telse {\r\n                        log.error(\"=========Not sure, maybe log a warning===========\");\r\n                    }\r\n                 result.setStatus(ProvisioningResult.STATUS_COMMITTED);                  \r\n                    \r\n                }\r\n\r\n                else if (AccountRequest.Operation.Modify.equals(account.getOperation())) {\r\n\r\n                    AttributeRequest attrReq = account.getAttributeRequest(\"GROUPID\");\r\n                    ArrayList gid = new ArrayList();\r\n\t\t\t\t\tlog.error(\"====M1 Entering the disable logic - JDBC con rule \");\r\n                    String nativeidnt = account.getNativeIdentity();\r\n                    String empLID, groupID;\r\n                    ResultSet rs;\r\n                    statement = connection.prepareStatement(\"SELECT LANID,ag.groupid as GROUPID  FROM HPHCONNECTNG.usergroups ug inner join HPHCONNECTNG.accessgroup ag  on ug.groupid=ag.groupid  where  ug.lanid = ?\");\r\n\t\t\t\t\tlog.error(\"====M2 statment query has started to run \");\r\n                    statement.setString(1, (String) account.getNativeIdentity());      // Assign value to input parameter      2 \r\n\r\n                    rs = statement.executeQuery();        // Get the result table from the query  3 \r\n                    log.error(\"====M3 statment query has executed =\"+ rs);\t\t\r\n                    rs.close();                       // Close the ResultSet                  5 \r\n                    statement.close();\r\n\t\t\t\t\t\r\n                    if (attrReq.getValue() instanceof String) {\r\n\t\t\t\t\t\tif(attrReq.getValue() != null){\r\n\t\t\t\t\t\t\tlog.error(\" 1, Modify attrReq.getValue() is not null ==>\"+attrReq.getValue());\r\n                        //gid.add(attrReq.getValue());\r\n\t\t\t\t\t\t//String gidvalue = gid;\r\n                        PreparedStatement statement = connection.prepareStatement(\"delete from HPHCONNECTNG.USERGROUPS where LANID = ? and GROUPID = ?\");\r\n                        statement.setString(1, (String) account.getNativeIdentity());\r\n\t\t\t\t\t\tstatement.setString(2, attrReq.getValue());\r\n                        if (account != null) {\r\n                            if (attrReq != null && ProvisioningPlan.Operation.Remove.equals(attrReq.getOperation())) {\r\n                                statement = connection.prepareStatement(\"delete from HPHCONNECTNG.USERGROUPS where LANID = ? and GROUPID = ?\");\r\n                                statement.setString(1, (String) account.getNativeIdentity());\r\n                                statement.setString(2, attrReq.getValue());\r\n                                log.error(\"6.1 Modify remove operation ==>gidvalue in Remove contains in for loop = \" + gidvalue);\r\n                                statement.executeUpdate();\r\n                            }\r\n                            else {\r\n                                statement.setString(2, attrReq.getValue());\r\n                                statement.executeUpdate();\r\n                                statement = connection.prepareStatement(\"insert into HPHCONNECTNG.USERGROUPS (LANID,GROUPID) values (?,?)\");\r\n                                statement.setString(1, (String) account.getNativeIdentity());\r\n                                statement.setString(2, attrReq.getValue());\r\n\r\n                                statement.executeUpdate();\r\n                            }\r\n                        }\r\n                        result.setStatus(ProvisioningResult.STATUS_COMMITTED);\r\n                    }\r\n\t\t\t\t\t log.error(\" Modify attrReq.getValue() is null ==>\"+attrReq.getValue());\r\n\t\t\t\t}\r\n\r\n                    else if (attrReq.getValue() instanceof List) {\r\n                        gid.addAll(attrReq.getValue());\r\n                        for (String gidvalue : gid) {\r\n                            PreparedStatement statement = connection.prepareStatement(\"delete from HPHCONNECTNG.USERGROUPS where LANID = ? and GROUPID = ?\");\r\n                            statement.setString(1, (String) account.getNativeIdentity());\r\n                            if (account != null) {\r\n\t\t\t\t\t\t\t\r\n                                if (attrReq != null && ProvisioningPlan.Operation.Remove.equals(attrReq.getOperation())) {\r\n                                    statement = connection.prepareStatement(\"delete from HPHCONNECTNG.USERGROUPS where LANID = ? and GROUPID = ?\");\r\n                                    statement.setString(1, (String) account.getNativeIdentity());\r\n                                    statement.setString(2, gidvalue);\r\n                                    log.error(\"6.1 Modify remove operation ==>gidvalue in Remove contains in for loop = \" + gidvalue);\r\n                                    statement.executeUpdate();\r\n                                }\r\n                                else {\r\n                                    statement.setString(2, gidvalue);\r\n                                    statement.executeUpdate();\r\n                                    statement = connection.prepareStatement(\"insert into HPHCONNECTNG.USERGROUPS (LANID,GROUPID) values (?,?)\");\r\n                                    statement.setString(1, (String) account.getNativeIdentity());\r\n                                    statement.setString(2, gidvalue);\r\n\r\n                                    statement.executeUpdate();\r\n                                }\r\n                            }\r\n                        }\r\n                        result.setStatus(ProvisioningResult.STATUS_COMMITTED);\r\n                    }\r\n                    else {\r\n                        // Not sure, maybe log a warning\r\n                    }\r\n\r\n                }\r\n                else if (AccountRequest.Operation.Disable.equals(account.getOperation())) {\r\n                    PreparedStatement statement = connection.prepareStatement(\"delete from HPHCONNECTNG.USERGROUPS where LANID = ?\");\r\n                    String nativeidnt = account.getNativeIdentity();\r\n                    log.error(\"9. Disable operation ==> getNativeIdentity =\" + nativeidnt);\r\n                    //log.error(\"9.1 gidvalue contains in for loop = \" + gidvalue);\r\n                    statement.setString(1, (String) account.getNativeIdentity());\r\n                    statement.executeUpdate();\r\n                    result.setStatus(ProvisioningResult.STATUS_COMMITTED);\r\n\r\n                }\r\n                else if (AccountRequest.Operation.Delete.equals(account.getOperation())) {\r\n                    PreparedStatement statement = connection.prepareStatement(\"delete from HPHCONNECTNG.USERGROUPS where LANID = ?\");\r\n                    String nativeidnt = account.getNativeIdentity();\r\n                    log.error(\"8. Delete Opeation ==> getNativeIdentity =\" + nativeidnt);\r\n\r\n\r\n                    statement.setString(1, (String) account.getNativeIdentity());\r\n                    //gid = attrReq.getValue();\r\n                    //statement.setString(2, gidvalue);\r\n\r\n                    statement.executeUpdate();\r\n                    result.setStatus(ProvisioningResult.STATUS_COMMITTED);\r\n                }\r\n                else {\r\n                    log.error(\"10 Unknown operation identified in the connector rule! \");\r\n                    // Unknown operation!\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            catch (SQLException e ) {\r\n                result.setStatus(ProvisioningResult.STATUS_FAILED);\r\n                result.addError(e);\r\n            }\r\n        finally {\r\n                if (statement != null) {\r\n                    statement.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nreturn result;"
  },
  "attributes": {
    "sourceVersion": "1.0"
  },
  "id": "dca48de8f18d4998b56cfa9b0a359577",
  "name": "Rule - HPHConnect - JDBCProvision",
  "created": "2024-05-27T09:49:15.055Z",
  "modified": "2024-08-12T13:54:02.627Z"
}