{
  "description": "Rule to invoke powershell code to create users folder using command",
  "type": "ConnectorAfterCreate",
  "signature": {
    "input": [],
    "output": null
  },
  "sourceCode": {
    "version": "1.1",
    "script": "#################################################  Sailpoint-P32H-AfterCreate-SharedDrive.ps1 ########################################\r\n#################################################  Sandbox Location: \\\\lwligspiqsand\\E$\\Sailpoint\\scripts ############################\r\n#################################################  Production Location: \\\\lwligspiqsand\\E$\\Sailpoint\\scripts #########################\r\n# SETUP\r\n# Instructions (for each IQService host that could run the script):\r\n#   - Update the path to Utils.dll (can be an unqualified path like \"Utils.dll\" since script is copied to IQService folder for execution)\r\n#   - Make sure Utils.dll is in the specified folder on each IQService host\r\n#   - Be sure the account that runs IQService has appropriate permissions to create directories and set permissions on them\r\n#   - Be sure to set the \"run as\" account for the IQService in Windows Service to the above-specified account instead of just the \"logged on\" user\r\n#   - Set a proper location for the $logFile variable\r\n#   - Set the $enableDebug flag to $true or $false to toggle debug mode\r\n###############################################################################################################################\r\n\r\n\r\n#include SailPoint library\r\nAdd-Type -Path \"E:\\IQService\\Utils.dll\";\r\n\r\n#import AD cmdlets\r\nImport-Module ActiveDirectory\r\nimport-module NTFSSecurity\r\n#log file info\r\n$logDate = Get-Date -UFormat \"%Y%m%d\"\r\n$logDateTime = Get-Date -Format \"dddd MM-dd-yyyy HH:mm K\"\r\n$logFile = \"E:\\SailPoint\\Scripts\\Logs\\Sailpoint-THP-AfterCreate-SharedDrive_$logDate.log\"\r\n#$enableDebug = $true\r\n\r\n###############################################################################################################################\r\n# HELPER FUNCTIONS\r\n###############################################################################################################################\r\n\r\n#save logging files to a separate txt file\r\nfunction LogToFile([String] $info) {\r\n    $info | Out-File $logFile -Append\r\n}\r\n\r\n\r\n\r\n# Read the environment variables\r\n$sReader = New-Object System.IO.StringReader([System.String]$env:Request);\r\n$sResult = New-Object System.IO.StringReader([System.String]$env:Result);\r\n\r\n# Form the xml reader objects\r\n$xmlReader = [ System.xml.XmlTextReader]([sailpoint.utils.xml.XmlUtil]::getReader($sReader));\r\n$xmlReader_Result = [ System.xml.XmlTextReader]([sailpoint.utils.xml.XmlUtil]::getReader($sResult));\r\n\r\n# Create SailPoint objects\r\n$requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);\r\n$resultObject = New-Object Sailpoint.Utils.objects.ServiceResult($xmlReader_Result);\r\n#$requestAsString = $env:Request;\r\n\r\n$zscalerSSOGroups = New-Object System.Collections.ArrayList\r\n$zscalerSSOGroups.Add(\"CN=TEST_EAI_GIT_USERS,OU=TEST_ACCESS-GROUPS,OU=TEST_THPGROUPS,DC=thp,DC=tahphq,DC=tahp\")\r\n$zscalerSSOGroups.Add(\"CN=TEST_GITUSERS,OU=TEST_ACCESS-GROUPS,OU=TEST_THPGROUPS,DC=thp,DC=tahphq,DC=tahp\")\r\n\r\n#Check if the request was processed successfully\r\nif($resultObject.Errors.count -eq 0){\r\n\r\n#Get Home directory path\r\nforeach ($attribute in $requestObject.AttributeRequests){\r\n\r\n#Create Home directory\r\nif($attribute.Name -eq \"sAMAccountName\"){\r\n#new-item $attribute.Value -itemtype directory;\r\nLogToFile($logDateTime+\": Request object sAMAccountName:\"+$attribute.Value)\r\n$UserID=$attribute.Value\r\n\r\n### starting client code\r\n\r\n}\r\n elseif ($attribute.Name -eq \"memberOf\"){\r\n         \r\n        $memberOf = $attribute.Value.List.String\r\n\t\t\r\n        if ($memberOf -ne $null){\r\n\t\t$requestedGroups=$memberOf\r\n        }\r\n        else {\r\n        $memberOf = $attribute.value\r\n\t\t$requestedGroup=$memberOf\r\n        }\r\n        \r\n    }\r\n}\r\n}\r\nelse {\r\n    LogToFile($logDateTime+\": Account request object was null\")\r\n }\r\n\r\n if($UserID -ne $Null) {\r\n\t$fullPath = \"\\\\is-fs1\\users\\\"+$UserID\r\n\t#New-Item -Path $fullPath -ItemType Directory\r\n\t$driveLetter = \"F:\"\r\n\t$user = Get-ADUser -Identity $UserID -Server thp\r\n    Set-ADUser -Server thp $UserID -HomeDrive $driveLetter -HomeDirectory $fullPath -ea Stop\r\n\tLogToFile($logDateTime+\": Setting drive letter for user in AD HomeDrive attribute ...\")\r\n\tLogToFile($logDateTime+\": FullPath :\"+$fullPath)\r\n\r\n$users = @{}\r\n# Do not remove these users from the user shared folder.  These users need access to user's home directory.  The sailpoint_ad_bind admin is not needed. It is there for testing.\r\n$users = Get-NTFSAccess $fullPath | Where-Object {$_.Account -ne \"BUILTIN\\Administrators\"} | Where-Object {$_.Account -ne \"THP\\sailpoint_ad_prod\"}  | Select-Object Account\r\n\r\n#Disable the inheritence\r\n$acl = Get-ACL -Path $fullPath\r\n$acl.SetAccessRuleProtection($True, $True)\r\nSet-Acl -Path $fullPath -AclObject $acl\r\n\r\nforeach ($user in $users) {\r\n#LogToFile(\"UUSER 93 :\"+$user)\r\n\r\n    $removalAccount = $user.Account\r\n    Write-Host \"Removing account - $($removalAccount)\"\r\n\tLogToFile($logDateTime+\": Removing account - $($removalAccount)\")\r\n   # Remove-NTFSAccess -Path $fullPath -Account $removalAccount -AccessRights FullControl -AccessType Allow -AppliesTo ThisFolderSubfoldersAndFiles\r\n    # Remove-NTFSAccess -Path $fullPath -Account $removalAccount -AccessRights FullControl -AccessType Deny -AppliesTo ThisFolderSubfoldersAndFiles  \r\n\r\n\r\n$UserWithDomain=\"thp\\\"+$UserID\r\n\r\nLogToFile($logDateTime+\": Adding - $($UserWithDomain)\")\r\n$ACL = Get-ACL -Path $fullPath\r\n$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($UserWithDomain,\"FullControl\",\"ContainerInherit,ObjectInherit\",\"None\",\"Allow\")\r\n$ACL.SetAccessRule($AccessRule)\r\n$ACL | Set-Acl -Path $fullPath\r\n\r\n$ACL | Set-Acl -Path $fullPath\r\n(Get-ACL -Path $fullPath).Access | Format-Table IdentityReference,FileSystemRights,AccessControlType,IsInherited,InheritanceFlags -AutoSize\r\nLogToFile($logDateTime+\": List the users access:\"+(Get-ACL -Path $fullPath).Access | Format-Table IdentityReference,FileSystemRights,AccessControlType,IsInherited,InheritanceFlags -AutoSize)\r\n\r\n\r\n\r\n}\r\n#Add-NTFSAccess -Path $fullPath -Account 'THP\\test_aw12628 -AccessRights FullControl -AccessType Deny -AppliesTo ThisFolderSubfoldersAndFiles '\r\n\r\n#$UserWithDomain=\"thp\\\"+$UserID\r\n\r\n#LogToFile($logDateTime+\": Adding - $($UserWithDomain)\")\r\n#$ACL = Get-ACL -Path $fullPath\r\n#$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($UserWithDomain,\"FullControl\",\"ContainerInherit,ObjectInherit\",\"None\",\"Allow\")\r\n#$ACL.SetAccessRule($AccessRule)\r\n#$ACL | Set-Acl -Path $fullPath\r\n\r\n\r\n#$ACL | Set-Acl -Path $fullPath\r\n#(Get-ACL -Path $fullPath).Access | Format-Table IdentityReference,FileSystemRights,AccessControlType,IsInherited,InheritanceFlags -AutoSize\r\n#LogToFile($logDateTime+\": List the users access:\"+(Get-ACL -Path $fullPath).Access | Format-Table IdentityReference,FileSystemRights,AccessControlType,IsInherited,InheritanceFlags -AutoSize)\r\n\r\nif($requestedGroups -ne $Null) {\r\nLogToFile($logDateTime+\": Requested Groups: requestedGroups\")\r\nforeach($group in $requestedGroups){\r\n        write-host $group\r\n        if ($zscalerSSOGroups -contains $group){\r\n         write-host \"group in zscalerSSO\"\r\n\t\t try{\r\n\t\t Add-ADGroupMember -Identity \"CN=TEST_CCMS_RI_Users,OU=TEST_ACCESS-GROUPS,OU=TEST_THPGROUPS,DC=thp,DC=tahphq,DC=tahp\" -Members $UserID\r\n\t\t }\r\n\t\t catch {\r\n\t\t Write-Host $_\r\n\t\t }\r\n        }\r\n\r\n        }\r\n\r\n}\r\nelseif($requestedGroup -ne $Null) {\r\nLogToFile($logDateTime+\": Requested Groups: requestedGroup\")\r\n\r\nif ($zscalerSSOGroups -contains $requestedGroup){\r\n         write-host \"string group in zscalerSSO\"\r\n\t\t LogToFile($logDateTime+\": Request object sAMAccountName is:\"+$UserID)\r\n\t\t try{\r\n\t\t LogToFile($logDateTime+\": Trying to add member\")\r\n\t\t Add-ADGroupMember -Identity \"CN=TEST_CCMS_RI_Users,OU=TEST_ACCESS-GROUPS,OU=TEST_THPGROUPS,DC=thp,DC=tahphq,DC=tahp\" -Members $UserID\r\n\t\t LogToFile($logDateTime+\": Trying to add member success\")\r\n\t\t }\r\n\t\t catch {\r\n\t\t LogToFile($logDateTime+\": Request object sAMAccountName is:\"+ $_)\r\n\t\t }\r\n        }\r\n\r\n}\r\nelse {\r\nLogToFile($logDateTime+\": No groups requested\")\r\n}\r\n}\r\n\r\nLogToFile($logDateTime+\": END OF CREATING HOMEDIRECTORY AND SETTING PERMISSIONS\")\r\nLogToFile($logDateTime+\": #### End of Powershell Script ####\")  "
  },
  "attributes": {
    "ObjectOrientedScript": "true",
    "extension": ".ps1",
    "sourceVersion": "1.1",
    "disabled": "false",
    "program": "powershell.exe",
    "timeout": "360"
  },
  "id": "2396171adf22423d801c8328e4b7508e",
  "name": "Rule - Sailpoint-THP-SharedDrive-AfterCreate",
  "created": "2023-08-28T19:22:22.248Z",
  "modified": "2025-07-09T12:29:08.586Z"
}