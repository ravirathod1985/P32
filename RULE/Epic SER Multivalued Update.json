{
  "description": "This rule will change \"Add\" and \"Remove\" multivalued attribute requests into \"Set\" requests. Existing\n        account attributes are read from the identity and added to the attribute request \"value\".\n        The operation is then changed to \"Set\". This allows for proper support of multivalued attributes for the Epic\n        SER connector. This is required because the connector does not have a native \"Add\" or \"Remove\" patch operation;\n        it only supports replace. It also does not support a native read for a single account, so this cannot be taken\n        care of within the connector logic.\n    ",
  "type": "BeforeProvisioning",
  "signature": {
    "input": [],
    "output": null
  },
  "sourceCode": {
    "version": "1.0",
    "script": "\n        \n            import sailpoint.object.ProvisioningPlan;\n            import sailpoint.object.Schema;\n            import sailpoint.rule.Account;\n            import sailpoint.tools.GeneralException;\n\n            private List objectToList(Object obj) {\n                if (obj instanceof Collection) {\n                    return new ArrayList((Collection) obj);\n                } else {\n                    return new ArrayList(Collections.singletonList(obj));\n                }\n            }\n\n            ////////////////////////////////////////////////////////////////\n            // Main\n            ////////////////////////////////////////////////////////////////\n            String logPrefix = \"MultivaluedUpdate - \";\n            log.trace(logPrefix + \"enter\");\n            if (plan == null || plan.getAccountRequests() == null) return;\n            log.trace(logPrefix + \"Account requests size: \" + plan.getAccountRequests().size());\n            Schema schema = application.getSchema(\"account\");\n            if (schema == null) {\n                log.warn(logPrefix + \"Could not get account schema. Exiting.\");\n                return;\n            }\n            for (ProvisioningPlan.AccountRequest accountRequest : plan.getAccountRequests()) {\n                if (accountRequest.getOp().equals(ProvisioningPlan.ObjectOperation.Create)) {\n                    continue;\n                }\n                if (accountRequest.getOp().equals(ProvisioningPlan.ObjectOperation.Delete)) {\n                    continue;\n                }\n                if (accountRequest.getAttributeRequests() == null) {\n                    continue;\n                }\n                log.trace(logPrefix + \"Attribute requests size: \" + accountRequest.getAttributeRequests().size());\n\n                for (ProvisioningPlan.AttributeRequest attributeRequest : accountRequest.getAttributeRequests()) {\n                    if (attributeRequest.getOp() == null || attributeRequest.getName() == null || attributeRequest.getValue() == null) {\n                        log.warn(logPrefix + \"Attribute request is missing op, name, or value..\");\n                        continue;\n                    }\n\n                    log.trace(logPrefix + \"attribute request name: \" + attributeRequest.getName() +\n                        \", value: \" + attributeRequest.getValue() + \", operation: \" + attributeRequest.getOp());\n\n                    if (!attributeRequest.getOp().equals(ProvisioningPlan.Operation.Add) &&\n                        !attributeRequest.getOp().equals(ProvisioningPlan.Operation.Remove)) {\n                        continue;\n                    }\n\n                    if (!schema.isMultiValued(attributeRequest.getName())) {\n                        log.trace(logPrefix + attributeRequest.getName() + \" is not multivalued. skipping.\");\n                        continue;\n                    }\n\n                    final String applicationName = accountRequest.getApplicationName() == null ?\n                        application.getName() :\n                        accountRequest.getApplicationName();\n                    if (applicationName == null) {\n                        log.error(logPrefix + \"ApplicationName not in accountRequest or application object\");\n                        continue;\n                    }\n                    log.debug(logPrefix + \"Application name: \" + applicationName);\n\n                    final String nativeIdentity = accountRequest.getNativeIdentity() == null ?\n                        plan.getNativeIdentity() :\n                        accountRequest.getNativeIdentity();\n                    if (nativeIdentity == null) {\n                        log.error(logPrefix + \"Native Identity not present in AccountRequest or ProvisioningPlan\");\n                        continue;\n                    }\n                    log.debug(logPrefix + \"nativeIdentity name: \" + nativeIdentity);\n\n                    final Account account = idn.getAccountByNativeIdentity(applicationName, nativeIdentity);\n                    if (account == null) {\n                        log.error(logPrefix + \"Could not find account for app \" + applicationName + \" and identity \" + nativeIdentity);\n                        continue;\n                    }\n                    log.debug(logPrefix + \"Found account with uuid: \" + account.getUuid());\n\n                    final Object rawExistingVals = idn.getRawAccountAttribute(account, attributeRequest.getName());\n                    if (rawExistingVals == null) {\n                        log.debug(logPrefix + \"Existing account attribute value is null for  \" + attributeRequest.getName() + \". Nothing to do.\");\n                        continue;\n                    }\n\n                    log.trace(logPrefix + \"Raw existing values class: \" + rawExistingVals.getClass());\n                    List targetValues = objectToList(rawExistingVals);\n\n                    final Object rawChangeVals = attributeRequest.getValue();\n                    log.trace(logPrefix + \"Attribute Request values class: \" + rawChangeVals.getClass());\n                    List changeVals = objectToList(rawChangeVals);\n\n                    if (attributeRequest.getOp().equals(ProvisioningPlan.Operation.Add)) {\n                        log.debug(logPrefix + \"AttributeRequest with ADD operation found name: \" + attributeRequest.getName());\n                        targetValues.addAll(changeVals);\n                        attributeRequest.setValue(targetValues);\n                        log.debug(logPrefix + \"Changing operation from \\\"Add\\\" to \\\"Set\\\"\");\n                        attributeRequest.setOp(ProvisioningPlan.Operation.Set);\n                        log.debug(logPrefix + \"Resulting target values: \" + targetValues);\n                    } else if (attributeRequest.getOp().equals(ProvisioningPlan.Operation.Remove)) {\n                        log.debug(logPrefix + \"AttributeRequest with REMOVE operation found name: \" + attributeRequest.getName());\n                        targetValues.removeAll(changeVals);\n                        attributeRequest.setValue(targetValues);\n                        log.debug(logPrefix + \"Changing operation from \\\"Remove\\\" to \\\"Set\\\"\");\n                        attributeRequest.setOp(ProvisioningPlan.Operation.Set);\n                        log.debug(logPrefix + \"Resulting target values: \" + targetValues);\n                    }\n                }\n            }\n            log.trace(logPrefix + \"exit\");\n        \n    "
  },
  "attributes": null,
  "id": "89b4385f1bbd42beb9e10ce0935e2189",
  "name": "Epic SER Multivalued Update",
  "created": "2023-09-26T16:15:08.831Z",
  "modified": "2025-08-05T01:49:34.111Z"
}