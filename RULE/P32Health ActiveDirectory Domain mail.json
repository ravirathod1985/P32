{
  "description": "This will generate the mail attribute and check for uniqueness.",
  "type": "AttributeGenerator",
  "signature": {
    "input": [],
    "output": null
  },
  "sourceCode": {
    "version": "2024-05-09 17:16:53",
    "script": "\n\n\t\t\t\t\nimport sailpoint.tools.GeneralException;\nimport sailpoint.api.*;\nimport sailpoint.object.*;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.logging;\nimport java.util.Random;\nimport java.util.regex.Pattern;\nimport java.lang.*;\nimport java.text.Normalizer;\nimport java.text.Normalizer.Form;\nimport org.apache.commons.lang.StringUtils;\n\nint maxIteration = 1;\nString preferredFirstName = null;\nString preferredLastName = null;\nString firstName = null;\nString lastName = null;\nString middleName = null;\n\npublic String replaceConsecutiveSpecialCharacters(String emailGenerated)\n{\n  for (int i=0; i < emailGenerated.length(); i++) \n  {\n      String repchar = \"\";\n      int count = 1;\n      if(((emailGenerated.charAt(i) == '_') || (emailGenerated.charAt(i) == '.')))\n      {\n        int j =i;\n        while (j+1 < emailGenerated.length() && emailGenerated.charAt(j)== emailGenerated.charAt(j+1))\n        {\n          j++;\n          count++;\n        }\n        if((emailGenerated.charAt(i) == '_'))\n        {\n          int k = 0;\n          while(k < count)\n          {\n            repchar = repchar+\"_\";\n            ++k;\n          }\n          emailGenerated = emailGenerated.replaceAll(repchar,\"_\");\n        }\n        if((emailGenerated.charAt(i) == '.'))\n        {\n          int k = 0;\n          while(k <count)\n          {\n            repchar = repchar+\".\";\n            ++k;\n          }\n          emailGenerated = emailGenerated.replace(repchar,\".\");\n        }\n      }\n   }\n  return emailGenerated;\n}\n\npublic String removeBadCharacters(String inputString) {\n\t  \n\t   inputString = inputString.replaceAll(\"[^A-Za-z0-9- ]\", \"\");\n\t   String costCenterCode = identity.getAttribute(\"costCenterCode\");\n\t  if( (costCenterCode!=null) && (costCenterCode.equals(\"355\") || costCenterCode.equals(\"324\") || costCenterCode.equals(\"358\") || costCenterCode.equals(\"998\") || costCenterCode.equals(\"999\")) ) \n\t  {\n\t\t inputString = inputString.replaceAll(\" \",\"_\").replaceAll(\"'\",\"\").trim();\n\t  }else {\n\t\t   inputString = inputString.replaceAll(\" \",\".\").replaceAll(\"'\",\"\").trim();\n\t  }\n\t \n\t   return inputString;\n}\npublic String removeDiacriticalMarks(String inputString) {\n\t\tinputString = StringUtils.trimToEmpty(inputString);\n\t\tinputString = Normalizer.normalize(inputString, Normalizer.Form.NFD); \n\t\tinputString = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\").matcher(inputString).replaceAll(\"\");\n\t\treturn inputString;\n}\npublic String generateMail (String firstName,  String lastName, String middleName, int iteration) {\n\n  // Data protection.\n  firstName  = StringUtils.trimToNull(firstName);\n  lastName   = StringUtils.trimToNull(lastName);\n  middleName = StringUtils.trimToNull(middleName);\n\n  if ( ( firstName == null ) || ( lastName == null ) )\n  return null;\n\n  firstName = removeBadCharacters(removeDiacriticalMarks(firstName));\n  middleName= removeBadCharacters(removeDiacriticalMarks(middleName));\n  lastName  = removeBadCharacters(removeDiacriticalMarks(lastName));\n\n  // Set Initial Default Values\n  String mail = \"@point32health.org\";\n  String separator=\".\";\n  // Below logic is added to change mail extension for specific cost center codes\n  String costCenterCode = identity.getAttribute(\"costCenterCode\");\n  if( (costCenterCode!=null) && (costCenterCode.equals(\"355\") || costCenterCode.equals(\"324\") || costCenterCode.equals(\"358\")) ) \n  {\n    mail = \"@carepartnersct.com\";  \n\tseparator=\"_\";\n  }\n   if( (costCenterCode!=null) && (costCenterCode.equals(\"998\")  || costCenterCode.equals(\"999\")) )  \n  {\n    mail = \"@hphci.harvard.edu\";\n\tseparator=\"_\";\n  }\n\n  String middleInitial     = \"\";\n  String mailPrefix = \"TEST_\";\n  String sourceName = \"Point32Health-ActiveDirectory [source]\";\n\n  // Build Distinguished Name based on Iteration and if middleName is not null\n  if (iteration == 0)\n    mail = mailPrefix + firstName +separator+ lastName + mail;\n  else if (iteration == 1 && !StringUtils.isBlank(middleName)){\n    middleInitial     = middleName.substring(0,1);\n    mail = mailPrefix + firstName + separator + middleInitial + separator+ lastName + mail;\n    }\n  else{\n    mail = \"NO_EMAIL\";\n  }\n  log.error(\"AccountGenerator Rule Operation - Mail Iteration Value: \" + mail);\n  // Evaluate Uniqueness and Loop through the method again if not unique.\n  if (isUnique (mail, sourceName))\n    return mail;\n  else if (iteration <= maxIteration)\n    return generateMail (firstName,  lastName, middleName, (iteration + 1));\n  else\n    return \"NO_EMAIL\";  //Return static email\n}\n\n\npublic boolean isUnique (String mail, String sourceName) throws GeneralException {\n  return (idn.isUniqueLDAPValue(identity.getName(),sourceName, \"mail\", mail));\n}\n\npreferredFirstName = identity.getAttribute(\"preferredFirstName\");\npreferredLastName = identity.getAttribute(\"preferredLastName\");\nif(preferredFirstName!=null && preferredLastName!=null)\n{\n  firstName = preferredFirstName;\n  lastName = preferredLastName;\n  middleName = identity.getAttribute(\"middleName\");\n}\nelse\n{\n  firstName = identity.getFirstname();\n  lastName = identity.getLastname();\n  middleName = identity.getAttribute(\"middleName\");\n}\n\nString emailGenerated = generateMail(firstName,lastName,middleName,0);\nif(emailGenerated!=null)\n{\n  log.info(\"Intial Email Generated : \"+emailGenerated);\n  emailGenerated = replaceConsecutiveSpecialCharacters(emailGenerated);\n  log.info(\"Email after Removal of consecutive special characters : \"+emailGenerated);\n}\nreturn emailGenerated;\n\n    \n\n\t\t\t"
  },
  "attributes": {
    "sourceVersion": "2024-05-09 17:16:53"
  },
  "id": "2d1d53f9eaec444b892f65f8d672fbbb",
  "name": "P32Health ActiveDirectory Domain mail",
  "created": "2022-08-11T18:56:00.610Z",
  "modified": "2024-05-09T17:16:53.273Z"
}