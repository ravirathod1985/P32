{
  "description": "This will generate a unique sAMAccountName after checking all 3 domains.",
  "type": "AttributeGenerator",
  "signature": {
    "input": [],
    "output": null
  },
  "sourceCode": {
    "version": "2023-08-01 14:18:41",
    "script": "\nimport sailpoint.tools.GeneralException;\nimport sailpoint.api.*;\nimport sailpoint.object.*;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.logging;\nimport java.util.Random;\nimport java.util.regex.Pattern;\nimport java.util.*;\nimport java.lang.*;\nimport java.text.Normalizer;\nimport java.text.Normalizer.Form;\nimport org.apache.commons.lang.StringUtils;\n\nint maxIteration = 100;\n\npublic String removeBadCharacters(String inputString) {\n    return inputString.replaceAll(\"[^A-Za-z0-9]\", \"\").replaceAll(\" \",\"\").replaceAll(\"'\",\"\").replaceAll(\"-\",\"\").trim();\n}\npublic String removeDiacriticalMarks(String inputString) {\n    inputString = StringUtils.trimToEmpty(inputString);\n    inputString = Normalizer.normalize(inputString, Normalizer.Form.NFD); \n    inputString = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\").matcher(inputString).replaceAll(\"\");\n    return inputString;\n}\npublic String generateUsername ( String firstName,  String lastName, int iteration ) {\n\n  // Data protection.\n  firstName = StringUtils.trimToNull( firstName );\n  lastName = StringUtils.trimToNull( lastName );\n\n  if ( ( firstName == null ) || ( lastName == null ) )\n    return null;\n\n  firstName = removeBadCharacters(removeDiacriticalMarks(firstName));\n  lastName  = removeBadCharacters(removeDiacriticalMarks(lastName));\n\n  // This will hold the final username, set last initials, set min-max for RandomNumber Generation\n  int rangeMax = 9999;\n  int padAmt = 4;\n  String username = null;\n  String lastInitial = lastName.substring(0,1);\n  String firstInitial = firstName.substring(0,1);\n  Random rand = new Random();\n  int randomNum = rand.nextInt(rangeMax + 1);\n  String PaddedRandomNum = Integer.toString(randomNum);\n  // Active Directory Source Domains To Search, by original sourcename value.\n  String ADSource1 = \"Point32Health-ActiveDirectory [source]\";\n  String ADSource2 = \"THP-ActiveDirectory [source]\";\n  String ADSource3 = \"HPHC-ActiveDirectory [source]\";\n\n  // Build Unique Username with random generated number padded to 5 digits, log out building of values.\n  log.error(\"AccountGenerator Rule Operation - PaddedRandomNum BEFORE padding: \" + PaddedRandomNum);\n  PaddedRandomNum = StringUtils.leftPad(PaddedRandomNum, padAmt, \"0\");\n  log.error(\"AccountGenerator Rule Operation - PaddedRandomNum AFTER padding: \" + PaddedRandomNum);\n  username = \"test_\" + firstInitial + lastInitial + PaddedRandomNum;\n  username = username.toLowerCase();\n  log.error(\"AccountGenerator Rule Operation - username value after concatenation and toLower: \" + username);\n  \n  if ( isUnique ( username, ADSource1, ADSource2, ADSource3 ) )\n    return username;\n  else if ( iteration < maxIteration )\n    return generateUsername ( firstName,  lastName, ( iteration + 1 ) );\n  else\n    return null;\n}\n\n// displayName is the AccountName attribute, in this case it should be sAMAccountName.\npublic boolean isUnique ( String username, String ADSource1, String ADSource2, String ADSource3 ) throws GeneralException {\n  boolean idnCheck = true;\n  boolean nativeADCheck = true;\n// Populate ArrayList with each source to check\n  List sourceList = new ArrayList();\n  sourceList.add(ADSource1);\n  sourceList.add(ADSource2);\n  sourceList.add(ADSource3);\n// for loop, for each source check whether username exists in IDN and then on Native AD system. Iterate through sources ONLY if both tests succeed.  \n  for(int i = 0; i < sourceList.size() && idnCheck && nativeADCheck; i++) {\n    log.error(\"Enter While Loop iteration: \" + i);\n    if (!idn.accountExistsByDisplayName(sourceList.get(i), username)){\n      idnCheck = true;\n      if(idn.isUniqueLDAPValue(identity.getName(),sourceList.get(i),\"sAMAccountName\",username))\n        nativeADCheck = true;\n      else\n        nativeADCheck = false;\n    }\n    else{\n      idnCheck = false;\n    }\n  }\n  if (nativeADCheck && idnCheck){\n    log.error(\"All checks passed, value is unique, return true.\");\n    return true;\n  }\n  else{\n    log.error(\"Some checks failed, value is not unique, return false.\");\n    return false;\n  }\n}\n\nreturn generateUsername( identity.getFirstname(), identity.getLastname(), 0 );\n    "
  },
  "attributes": {
    "sourceVersion": "2023-08-01 14:18:41"
  },
  "id": "30069b54365f45bda0422d4d561b5731",
  "name": "P32Health ActiveDirectory Domain sAMAccountName",
  "created": "2022-08-11T18:56:01.739Z",
  "modified": "2024-04-17T19:16:04.278Z"
}