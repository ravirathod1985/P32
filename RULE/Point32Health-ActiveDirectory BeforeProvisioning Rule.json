{
  "description": "",
  "type": "BeforeProvisioning",
  "signature": {
    "input": [],
    "output": null
  },
  "sourceCode": {
    "version": "2024-10-01 15:11:36",
    "script": "\n\n\timport java.util.ArrayList;\n\timport java.util.Date;\n\timport java.text.SimpleDateFormat;\n\t\n\timport sailpoint.object.Identity;\n\timport sailpoint.object.Application;\n\timport sailpoint.object.Link;\n\timport sailpoint.object.ProvisioningPlan;\n\timport sailpoint.object.ProvisioningPlan.Operation;\n\timport sailpoint.object.ProvisioningPlan.AccountRequest;\n\timport sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\n\timport sailpoint.object.ProvisioningPlan.AttributeRequest;\n\timport sailpoint.api.IdentityService;\n\timport sailpoint.tools.Util;\n\t\n\tString Environment=\"Sandbox\";\n\tString activeOU = null;\n\tString disabledOU = null;\n\t\n\tif(Environment.equals(\"Sandbox\")) {\n     activeOU = \"OU=TEST_P32HUsers,DC=p32health,DC=org\"; //Sandbox users Active OU\n     disabledOU = \"OU=Disabled_Accounts,OU=TEST_P32HUsers,DC=p32health,DC=org\"; //Sandbox users Disable OU\n    \n    }\n\t\n\tif(Environment.equals(\"Prod\")) {\n          activeOU = \"OU=P32HUsers,DC=p32health,DC=org\"; // Active OU\n         disabledOU = \"OU=DISABLED_ACCOUNTS,OU=P32HUsers,DC=p32health,DC=org\"; // Disable OU\n\t}\n\t\n   String adDomainUsers = \"CN=Domain Users,CN=Users,DC=p32health,DC=org\";\n\tIdentity identity = null;\n    String nativeIdentity = null;\n\tString accountNativeIdentity = null;\n\tList usersMembership = new ArrayList();\n    \n\tif( plan != null ) {\n\t\tidentity = plan.getIdentity();\n\t\tnativeIdentity = plan.getNativeIdentity();\n\t}\n\t\n\tif(identity != null) {\n\t\tlog.info(\"identity: \"+ identity.getName() +\" :: [AD_PROV] Executing Before Provisioning Rule.... nativeIdentity - \" + nativeIdentity );\n\t\t\n\t\t\n\t\tlog.info(\"identity: \"+ identity.getName() +\" :: [AD_PROV] Lifecycle State: \" + identity.getAttribute(\"cloudLifecycleState\") );\n\t\tif (Util.nullSafeEq(identity.getAttribute(\"cloudLifecycleState\"), \"deleteaccount\"))  {\n\t\t\tList emptyAttributes = new ArrayList();\n\t\t\t\n\t\t\tList accountRequests = plan.getAccountRequests();\n\t\t\tfor (AccountRequest accountRequest : accountRequests) {\n\t\t\t\tAccountRequest.Operation op = accountRequest.getOperation();\n                String accountName = accountRequest.getNativeIdentity();\n      \t\t\t\t//delete account after 180 days of term\n      \t\t\t\tif  ( Util.nullSafeEq(accountRequest.getOperation(), AccountRequest.Operation.Enable)) {\n        \t\t\t  log.info(\"identity: \"+ identity.getName() +\" :: [AD_PROV] deleting account after 180 days of term \");\n\t\t\t\t\t      if (!accountName.contains(\"LEGAL_HOLD\")) {\n\t\t\t\t          accountRequest.setOperation(AccountRequest.Operation.Delete);\n\t\t\t\t\t       } else {\n\t\t\t\t\t    accountRequest.setOperation(AccountRequest.Operation.Disable);\n\t\t\t\t\t      }\n\t\t\t\t\t    accountRequest.setAttributeRequests(emptyAttributes);\t\t\t\t\n\t\t\t\t    }\n\t\t\t   }\n\t\t} \n\t\telse if (Util.nullSafeEq(identity.getAttribute(\"cloudLifecycleState\"), \"removeaccess\"))  {\n\t\t\tList emptyAttributes = new ArrayList();\n\t\t\t//List of LicensingGroups that needs to be retained during Termination\n\t\t\tList licensingGroups = new ArrayList();\n\t\t\tlicensingGroups.add(\"CN=TEST_P32_AZ_OFFICE_E3_LIC_PROVISION,OU=TEST_P32HGroups,DC=p32health,DC=org\");\n\t\t\tlicensingGroups.add(\"CN=TEST_AzZscaler-WebExcepWeTransfer,OU=TEST_P32HGroups,DC=p32health,DC=org\");\n\t\t\tList accountRequests = plan.getAccountRequests();\n\t\t\tfor (AccountRequest accountRequest : accountRequests) {\n\t\t\t\tAccountRequest.Operation op = accountRequest.getOperation();\n      \t\t\t\t//Remove all AD Access after 14 days\n      \t\t\t\tif  ( ( Util.nullSafeEq(accountRequest.getOperation(), AccountRequest.Operation.Enable)) || ( Util.nullSafeEq(accountRequest.getOperation(), AccountRequest.Operation.Modify)) ) {\n        \t\t\t\tlog.info(\"identity: \"+ identity.getName() +\" :: [AD_PROV] remove account access after initial term \");\n        \t\t\t\t\n\t\t\t\t\t\t\n                        \t\t\t\t\t\t\n\t\t\t\t\t    //Below code retains access on LicensingGroups during termination\n\t\t\t\t\t\tString accountNativeIdentity = accountRequest.getNativeIdentity();\n\t\t\t\t\t\tusersMembership = (List) idn.getRawAccountAttribute(application.getName(), accountNativeIdentity,\"memberOf\");\n\t\t\t\t\t\tlog.info(\"Users AD Groups before removing access : \"+usersMembership);\n\t\t\t\t\t\tif(usersMembership!=null && usersMembership.size()>0)\n\t\t\t\t\t\t{\n\t\t\t\t\t      //Below code checks if user is a member of Licensing Groups, if yes , the groups are retained and not sent for removal\t\n\t\t\t\t\t\t  for(String licGroup:licensingGroups)\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\tif(usersMembership.contains(licGroup))\n\t\t\t\t\t\t\t{  \n\t\t\t\t\t\t\t  usersMembership.remove(licGroup);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\taccountRequest.add(new AttributeRequest(\"memberOf\", ProvisioningPlan.Operation.Remove, usersMembership));\n\t\t\t\t\t\taccountRequest.setOperation(AccountRequest.Operation.Disable);\t\n\t\t\t\t\t\taccountRequest.add(new AttributeRequest(\"AC_NewParent\",ProvisioningPlan.Operation.Set, disabledOU) );   \n\t\t\t\t\t\tlog.info(\"Users AD groups removed  : \"+usersMembership);\n                    }\n                }\n            } \n\t\telse if (Util.nullSafeEq(identity.getAttribute(\"cloudLifecycleState\"),\"inactive\")) {\n\t\t\tList accountRequests = plan.getAccountRequests();\n\t\t\tfor (AccountRequest accountRequest : accountRequests) {\n\t\t\t\t\n\t\t\t\t//move account to disabled OU on term when LCS is inactive\n\t\t\t\tif (Util.nullSafeEq(accountRequest.getOperation(),AccountRequest.Operation.Disable)) {\n\t\t\t\t\tlog.info(\"identity: \"+ identity.getName() +\" :: [AD_PROV] move account to disabled OU on term \");\n\t\t\t\t\t\n\t\t\t\t\taccountRequest.add(new AttributeRequest(\"AC_NewParent\",ProvisioningPlan.Operation.Set, disabledOU) );\n                    }\n                }\n            } \n\t    else if( Util.nullSafeEq(identity.getAttribute(\"cloudLifecycleState\"),\"active\") || Util.nullSafeEq(identity.getAttribute(\"cloudLifecycleState\"),\"prehire\") ){\n\t\t\tList accountRequests = plan.getAccountRequests();\n\t\t\tfor (AccountRequest accountRequest : accountRequests) {\n\t\t\t\n\t\t\t\t//move account to active OU on rehire\n\t\t\t\tif (Util.nullSafeEq(accountRequest.getOperation(),AccountRequest.Operation.Enable)) {\n\t\t\t\t\taccountRequest.add(new AttributeRequest(\"AC_NewParent\",ProvisioningPlan.Operation.Set, activeOU) );\n\t\t\t\t\taccountRequest.add(new AttributeRequest(\"msExchHideFromAddressLists\", ProvisioningPlan.Operation.Set, false));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\tlog.info(\"identity: \"+ identity.getName() +\" :: [AD_PROV] Complete Before Provisioning Rule....\");\n  \n\n\t\t\t"
  },
  "attributes": {
    "sourceVersion": "2024-10-01 15:11:36"
  },
  "id": "d7a2ec20b79241f9bbe8cfb9ac10e05e",
  "name": "Point32Health-ActiveDirectory BeforeProvisioning Rule",
  "created": "2022-08-25T15:42:40.034Z",
  "modified": "2024-10-01T15:11:37.560Z"
}